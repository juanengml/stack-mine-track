---
- name: Rodar pipelines do Kedro (com diagnóstico de caminho)
  hosts: all
  gather_facts: false
  vars:
    # Candidatos de caminho para o diretório do projeto Kedro
    project_dir_candidates:
      - /home/serverlab/stack-mine-track/mine-tracker
      - /home/serverlab/stack-mine-track/stack-mine-track/mine-tracker
      - /home/serverlab/mine-tracker
    # Caminho do Python do venv
    venv_python_candidates:
      - /home/serverlab/stack-mine-track/env/bin/python
      - /home/serverlab/env/bin/python
    # Logs
    log_file_default: info.log

    # Eleve privilégios apenas para verificações gerais (whoami/apt etc)
    ansible_become: true
    ansible_become_method: sudo
    ansible_become_password: tijolo22

  tasks:
    - name: Verificar usuário atual (com sudo)
      ansible.builtin.command: whoami
      become: true
      register: whoami_result

    - name: Exibir usuário efetivo
      ansible.builtin.debug:
        msg: "Executando como: {{ whoami_result.stdout }}"

    # Descoberta do project_dir
    - name: Checar candidatos de project_dir
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ project_dir_candidates }}"
      register: project_stats
      become: false

    - name: Definir project_dir encontrado
      ansible.builtin.set_fact:
        project_dir: "{{ (project_stats.results | selectattr('stat.exists','equalto',true) | map(attribute='stat.path') | list)[0] | default(omit) }}"
      become: false

    - name: Falhar se project_dir não encontrado (mostrar conteúdo do diretório pai)
      ansible.builtin.shell: |
        set -e
        for d in {{ project_dir_candidates | join(' ') }}; do
          echo "Tentou: $d"
          echo "Pai de $d:"
          parent="$(dirname "$d")"
          [ -d "$parent" ] && ls -la "$parent" || echo "(pai inexistente: $parent)"
          echo "------"
        done
        exit 1
      args:
        executable: /bin/bash
      when: project_dir is not defined
      become: false

    - name: Mostrar project_dir selecionado
      ansible.builtin.debug:
        msg: "project_dir => {{ project_dir }}"
      become: false

    # Descoberta do venv_python
    - name: Checar candidatos de venv_python
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ venv_python_candidates }}"
      register: venv_stats
      become: false

    - name: Definir venv_python encontrado
      ansible.builtin.set_fact:
        venv_python: "{{ (venv_stats.results | selectattr('stat.exists','equalto',true) | map(attribute='stat.path') | list)[0] | default(omit) }}"
      become: false

    - name: Falhar se venv_python não encontrado (mostrar opções)
      ansible.builtin.fail:
        msg: "Python do venv não encontrado. Verifique os caminhos candidatos: {{ venv_python_candidates | join(', ') }}"
      when: venv_python is not defined
      become: false

    - name: Mostrar venv_python selecionado
      ansible.builtin.debug:
        msg: "venv_python => {{ venv_python }}"
      become: false

    - name: Verificar versão do Kedro no venv
      ansible.builtin.command: "{{ venv_python }} -m kedro --version"
      args:
        chdir: "{{ project_dir }}"
      register: kedro_version
      changed_when: false
      become: false

    - name: Exibir versão do Kedro
      ansible.builtin.debug:
        msg: "Kedro versão: {{ kedro_version.stdout | default('(sem saída)') }}"
      become: false

    - name: Rodar pipeline mine
      ansible.builtin.shell: |
        set -euo pipefail
        log_file="{{ log_file:-{{ log_file_default }} }}"
        echo "==== $(date -Is) Pipeline: mine ====" | tee -a "$log_file"
        "{{ venv_python }}" -m kedro run --pipeline mine 2>&1 | tee -a "$log_file"
        echo "==== $(date -Is) Fim: mine ====" | tee -a "$log_file"
      args:
        chdir: "{{ project_dir }}"
        executable: /bin/bash
      environment:
        # opcional: garanta PATH do venv à frente
        PATH: "{{ (venv_python | dirname) | dirname }}/bin:{{ ansible_env.PATH | default('/usr/bin:/bin') }}"
      become: false

    - name: Rodar pipeline model
      ansible.builtin.shell: |
        set -euo pipefail
        log_file="{{ log_file:-{{ log_file_default }} }}"
        echo "==== $(date -Is) Pipeline: model ====" | tee -a "$log_file"
        "{{ venv_python }}" -m kedro run --pipeline model 2>&1 | tee -a "$log_file"
        echo "==== $(date -Is) Fim: model ====" | tee -a "$log_file"
      args:
        chdir: "{{ project_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ (venv_python | dirname) | dirname }}/bin:{{ ansible_env.PATH | default('/usr/bin:/bin') }}"
      become: false

    - name: Rodar pipeline inference
      ansible.builtin.shell: |
        set -euo pipefail
        log_file="{{ log_file:-{{ log_file_default }} }}"
        echo "==== $(date -Is) Pipeline: inference ====" | tee -a "$log_file"
        "{{ venv_python }}" -m kedro run --pipeline inference 2>&1 | tee -a "$log_file"
        echo "==== $(date -Is) Fim: inference ====" | tee -a "$log_file"
      args:
        chdir: "{{ project_dir }}"
        executable: /bin/bash
      environment:
        PATH: "{{ (venv_python | dirname) | dirname }}/bin:{{ ansible_env.PATH | default('/usr/bin:/bin') }}"
      become: false
